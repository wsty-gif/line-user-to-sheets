"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/googleapis-common";
exports.ids = ["vendor-chunks/googleapis-common"];
exports.modules = {

/***/ "(api)/../node_modules/googleapis-common/build/src/apiIndex.js":
/*!***************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/apiIndex.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAPI = void 0;\nfunction getAPI(api, options, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nversions, context) {\n    let version;\n    if (typeof options === 'string') {\n        version = options;\n        options = {};\n    }\n    else if (typeof options === 'object') {\n        version = options.version;\n        delete options.version;\n    }\n    else {\n        throw new Error('Argument error: Accepts only string or object');\n    }\n    try {\n        const ctr = versions[version];\n        const ep = new ctr(options, context);\n        return Object.freeze(ep);\n    }\n    catch (e) {\n        throw new Error(`Unable to load endpoint ${api}(\"${version}\"): ${e.message}`);\n    }\n}\nexports.getAPI = getAPI;\n//# sourceMappingURL=apiIndex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9hcGlJbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELElBQUksSUFBSSxRQUFRLE1BQU0sVUFBVTtBQUNuRjtBQUNBO0FBQ0EsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGluZS11c2VyLXRvLXNoZWV0cy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2FwaUluZGV4LmpzPzliN2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QVBJID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0QVBJKGFwaSwgb3B0aW9ucywgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudmVyc2lvbnMsIGNvbnRleHQpIHtcbiAgICBsZXQgdmVyc2lvbjtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZlcnNpb24gPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy52ZXJzaW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBlcnJvcjogQWNjZXB0cyBvbmx5IHN0cmluZyBvciBvYmplY3QnKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3RyID0gdmVyc2lvbnNbdmVyc2lvbl07XG4gICAgICAgIGNvbnN0IGVwID0gbmV3IGN0cihvcHRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoZXApO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2FkIGVuZHBvaW50ICR7YXBpfShcIiR7dmVyc2lvbn1cIik6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0QVBJID0gZ2V0QVBJO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpSW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/apiIndex.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/build/src/apirequest.js":
/*!*****************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/apirequest.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createAPIRequest = void 0;\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(api)/../node_modules/google-auth-library/build/src/index.js\");\nconst qs = __webpack_require__(/*! qs */ \"(api)/../node_modules/qs/lib/index.js\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst urlTemplate = __webpack_require__(/*! url-template */ \"(api)/../node_modules/url-template/lib/url-template.js\");\nconst uuid = __webpack_require__(/*! uuid */ \"(api)/../node_modules/uuid/dist/esm-node/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(api)/../node_modules/extend/index.js\");\nconst isbrowser_1 = __webpack_require__(/*! ./isbrowser */ \"(api)/../node_modules/googleapis-common/build/src/isbrowser.js\");\nconst h2 = __webpack_require__(/*! ./http2 */ \"(api)/../node_modules/googleapis-common/build/src/http2.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(api)/../node_modules/googleapis-common/package.json\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isReadableStream(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        typeof obj.pipe === 'function' &&\n        obj.readable !== false &&\n        typeof obj._read === 'function' &&\n        typeof obj._readableState === 'object');\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nasync function createAPIRequestAsync(parameters) {\n    var _a;\n    // Combine the GaxiosOptions options passed with this specific\n    // API call with the global options configured at the API Context\n    // level, or at the global level.\n    const options = extend(true, {}, // Ensure we don't leak settings upstream\n    ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {}, // Google level options\n    parameters.context._options || {}, // Per-API options\n    parameters.options // API call params\n    );\n    const params = extend(true, {}, // New base object\n    options.params, // Combined global/per-api params\n    parameters.params // API call params\n    );\n    options.userAgentDirectives = options.userAgentDirectives || [];\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This meant that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */\n    let resource = params.requestBody;\n    if (!params.requestBody &&\n        params.resource &&\n        (!parameters.requiredParams.includes('resource') ||\n            typeof params.resource !== 'string')) {\n        resource = params.resource;\n        delete params.resource;\n    }\n    delete params.requestBody;\n    let authClient = params.auth || options.auth;\n    const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n    delete params.media;\n    delete params.auth;\n    // Grab headers from user provided options\n    const headers = params.headers || {};\n    populateAPIHeader(headers);\n    delete params.headers;\n    // Un-alias parameters that were modified due to conflicts with reserved names\n    Object.keys(params).forEach(key => {\n        if (key.slice(-1) === '_') {\n            const newKey = key.slice(0, -1);\n            params[newKey] = params[key];\n            delete params[key];\n        }\n    });\n    // Check for missing required parameters in the API request\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n    if (missingParams) {\n        // Some params are missing - stop further operations and inform the\n        // developer which required params are not included in the request\n        throw new Error('Missing required parameters: ' + missingParams.join(', '));\n    }\n    // Parse urls\n    if (options.url) {\n        options.url = urlTemplate.parse(options.url).expand(params);\n    }\n    if (parameters.mediaUrl) {\n        parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    }\n    // Rewrite url if rootUrl is globally set\n    if (parameters.context._options.rootUrl !== undefined &&\n        options.url !== undefined) {\n        const originalUrl = new URL(options.url);\n        const path = originalUrl.href.substr(originalUrl.origin.length);\n        options.url = new URL(path, parameters.context._options.rootUrl).href;\n    }\n    // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n    options.paramsSerializer = params => {\n        return qs.stringify(params, { arrayFormat: 'repeat' });\n    };\n    // delete path params from the params object so they do not end up in query\n    parameters.pathParams.forEach(param => delete params[param]);\n    // if authClient is actually a string, use it as an API KEY\n    if (typeof authClient === 'string') {\n        params.key = params.key || authClient;\n        authClient = undefined;\n    }\n    function multipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        const rStream = new stream.PassThrough({\n            flush(callback) {\n                this.push('\\r\\n');\n                this.push(finale);\n                callback();\n            },\n        });\n        const pStream = new ProgressStream();\n        const isStream = isReadableStream(multipart[1].body);\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            rStream.push(preamble);\n            if (typeof part.body === 'string') {\n                rStream.push(part.body);\n                rStream.push('\\r\\n');\n            }\n            else {\n                // Gaxios does not natively support onUploadProgress in node.js.\n                // Pipe through the pStream first to read the number of bytes read\n                // for the purpose of tracking progress.\n                pStream.on('progress', bytesRead => {\n                    if (options.onUploadProgress) {\n                        options.onUploadProgress({ bytesRead });\n                    }\n                });\n                part.body.pipe(pStream).pipe(rStream);\n            }\n        }\n        if (!isStream) {\n            rStream.push(finale);\n            rStream.push(null);\n        }\n        options.data = rStream;\n    }\n    function browserMultipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        headers['content-type'] = `multipart/related; boundary=${boundary}`;\n        let content = '';\n        for (const part of multipart) {\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part['content-type']}\\r\\n\\r\\n`;\n            content += preamble;\n            if (typeof part.body === 'string') {\n                content += part.body;\n                content += '\\r\\n';\n            }\n        }\n        content += finale;\n        options.data = content;\n    }\n    if (parameters.mediaUrl && media.body) {\n        options.url = parameters.mediaUrl;\n        if (resource) {\n            params.uploadType = 'multipart';\n            const multipart = [\n                { 'content-type': 'application/json', body: JSON.stringify(resource) },\n                {\n                    'content-type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                    body: media.body,\n                },\n            ];\n            if (!(0, isbrowser_1.isBrowser)()) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                multipartUpload(multipart);\n            }\n            else {\n                browserMultipartUpload(multipart);\n            }\n        }\n        else {\n            params.uploadType = 'media';\n            Object.assign(headers, { 'content-type': media.mimeType || defaultMime });\n            options.data = media.body;\n        }\n    }\n    else {\n        options.data = resource || undefined;\n    }\n    options.headers = extend(true, options.headers || {}, headers);\n    options.params = params;\n    if (!(0, isbrowser_1.isBrowser)()) {\n        options.headers['Accept-Encoding'] = 'gzip';\n        options.userAgentDirectives.push({\n            product: 'google-api-nodejs-client',\n            version: pkg.version,\n            comment: 'gzip',\n        });\n        const userAgent = options.userAgentDirectives\n            .map(d => {\n            let line = `${d.product}/${d.version}`;\n            if (d.comment) {\n                line += ` (${d.comment})`;\n            }\n            return line;\n        })\n            .join(' ');\n        options.headers['User-Agent'] = userAgent;\n    }\n    // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n    if (!options.validateStatus) {\n        options.validateStatus = status => {\n            return (status >= 200 && status < 300) || status === 304;\n        };\n    }\n    // Retry by default\n    options.retry = options.retry === undefined ? true : options.retry;\n    delete options.auth; // is overridden by our auth code\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n    if (authClient && typeof authClient === 'object') {\n        if (options.http2) {\n            const authHeaders = await authClient.getRequestHeaders(options.url);\n            const mooOpts = Object.assign({}, options);\n            mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n            return h2.request(mooOpts);\n        }\n        else {\n            return authClient.request(options);\n        }\n    }\n    else {\n        return new google_auth_library_1.DefaultTransporter().request(options);\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\nfunction populateAPIHeader(headers) {\n    // TODO: we should eventually think about adding browser support for this\n    // populating the gl-web header (web support should also be added to\n    // google-auth-library-nodejs).\n    if (!(0, isbrowser_1.isBrowser)()) {\n        headers['x-goog-api-client'] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n    }\n}\n//# sourceMappingURL=apirequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9hcGlyZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4Qiw4QkFBOEIsbUJBQU8sQ0FBQyx5RkFBcUI7QUFDM0QsV0FBVyxtQkFBTyxDQUFDLGlEQUFJO0FBQ3ZCLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQixvQkFBb0IsbUJBQU8sQ0FBQyw0RUFBYztBQUMxQyxhQUFhLG1CQUFPLENBQUMsK0RBQU07QUFDM0IsZUFBZSxtQkFBTyxDQUFDLHFEQUFRO0FBQy9CLG9CQUFvQixtQkFBTyxDQUFDLG1GQUFhO0FBQ3pDLFdBQVcsbUJBQU8sQ0FBQywyRUFBUztBQUM1QjtBQUNBLFlBQVksbUJBQU8sQ0FBQyxnRkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsNkZBQTZGO0FBQzdGLHFDQUFxQztBQUNyQztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx1QkFBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0Esc0RBQXNELFdBQVcsU0FBUztBQUMxRTtBQUNBLGtDQUFrQyxTQUFTLG9CQUFvQixxQkFBcUI7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxXQUFXO0FBQzlEO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQyxzREFBc0QsV0FBVyxTQUFTO0FBQzFFO0FBQ0E7QUFDQSxrQ0FBa0MsU0FBUyxvQkFBb0IscUJBQXFCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0VBQW9FO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsK0NBQStDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMEJBQTBCLFVBQVUsR0FBRyxVQUFVO0FBQ2pEO0FBQ0EsNkJBQTZCLFVBQVU7QUFDdkM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsYUFBYSxVQUFVLHNCQUFzQjtBQUM1RjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW5lLXVzZXItdG8tc2hlZXRzLy4uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvYXBpcmVxdWVzdC5qcz85Mzc3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUFQSVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBnb29nbGVfYXV0aF9saWJyYXJ5XzEgPSByZXF1aXJlKFwiZ29vZ2xlLWF1dGgtbGlicmFyeVwiKTtcbmNvbnN0IHFzID0gcmVxdWlyZShcInFzXCIpO1xuY29uc3Qgc3RyZWFtID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNvbnN0IHVybFRlbXBsYXRlID0gcmVxdWlyZShcInVybC10ZW1wbGF0ZVwiKTtcbmNvbnN0IHV1aWQgPSByZXF1aXJlKFwidXVpZFwiKTtcbmNvbnN0IGV4dGVuZCA9IHJlcXVpcmUoXCJleHRlbmRcIik7XG5jb25zdCBpc2Jyb3dzZXJfMSA9IHJlcXVpcmUoXCIuL2lzYnJvd3NlclwiKTtcbmNvbnN0IGgyID0gcmVxdWlyZShcIi4vaHR0cDJcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgcGtnID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbShvYmopIHtcbiAgICByZXR1cm4gKG9iaiAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2Ygb2JqLnBpcGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgb2JqLnJlYWRhYmxlICE9PSBmYWxzZSAmJlxuICAgICAgICB0eXBlb2Ygb2JqLl9yZWFkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHR5cGVvZiBvYmouX3JlYWRhYmxlU3RhdGUgPT09ICdvYmplY3QnKTtcbn1cbmZ1bmN0aW9uIGdldE1pc3NpbmdQYXJhbXMocGFyYW1zLCByZXF1aXJlZCkge1xuICAgIGNvbnN0IG1pc3NpbmcgPSBuZXcgQXJyYXkoKTtcbiAgICByZXF1aXJlZC5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgICAgLy8gSXMgdGhlIHJlcXVpcmVkIHBhcmFtIGluIHRoZSBwYXJhbXMgb2JqZWN0P1xuICAgICAgICBpZiAocGFyYW1zW3BhcmFtXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtaXNzaW5nLnB1c2gocGFyYW0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gSWYgdGhlcmUgYXJlIGFueSByZXF1aXJlZCBwYXJhbXMgbWlzc2luZywgcmV0dXJuIHRoZWlyIG5hbWVzIGluIGFycmF5LFxuICAgIC8vIG90aGVyd2lzZSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBtaXNzaW5nLmxlbmd0aCA+IDAgPyBtaXNzaW5nIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFQSVJlcXVlc3QocGFyYW1ldGVycywgY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY3JlYXRlQVBJUmVxdWVzdEFzeW5jKHBhcmFtZXRlcnMpLnRoZW4ociA9PiBjYWxsYmFjayhudWxsLCByKSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFQSVJlcXVlc3RBc3luYyhwYXJhbWV0ZXJzKTtcbiAgICB9XG59XG5leHBvcnRzLmNyZWF0ZUFQSVJlcXVlc3QgPSBjcmVhdGVBUElSZXF1ZXN0O1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQVBJUmVxdWVzdEFzeW5jKHBhcmFtZXRlcnMpIHtcbiAgICB2YXIgX2E7XG4gICAgLy8gQ29tYmluZSB0aGUgR2F4aW9zT3B0aW9ucyBvcHRpb25zIHBhc3NlZCB3aXRoIHRoaXMgc3BlY2lmaWNcbiAgICAvLyBBUEkgY2FsbCB3aXRoIHRoZSBnbG9iYWwgb3B0aW9ucyBjb25maWd1cmVkIGF0IHRoZSBBUEkgQ29udGV4dFxuICAgIC8vIGxldmVsLCBvciBhdCB0aGUgZ2xvYmFsIGxldmVsLlxuICAgIGNvbnN0IG9wdGlvbnMgPSBleHRlbmQodHJ1ZSwge30sIC8vIEVuc3VyZSB3ZSBkb24ndCBsZWFrIHNldHRpbmdzIHVwc3RyZWFtXG4gICAgKChfYSA9IHBhcmFtZXRlcnMuY29udGV4dC5nb29nbGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5fb3B0aW9ucykgfHwge30sIC8vIEdvb2dsZSBsZXZlbCBvcHRpb25zXG4gICAgcGFyYW1ldGVycy5jb250ZXh0Ll9vcHRpb25zIHx8IHt9LCAvLyBQZXItQVBJIG9wdGlvbnNcbiAgICBwYXJhbWV0ZXJzLm9wdGlvbnMgLy8gQVBJIGNhbGwgcGFyYW1zXG4gICAgKTtcbiAgICBjb25zdCBwYXJhbXMgPSBleHRlbmQodHJ1ZSwge30sIC8vIE5ldyBiYXNlIG9iamVjdFxuICAgIG9wdGlvbnMucGFyYW1zLCAvLyBDb21iaW5lZCBnbG9iYWwvcGVyLWFwaSBwYXJhbXNcbiAgICBwYXJhbWV0ZXJzLnBhcmFtcyAvLyBBUEkgY2FsbCBwYXJhbXNcbiAgICApO1xuICAgIG9wdGlvbnMudXNlckFnZW50RGlyZWN0aXZlcyA9IG9wdGlvbnMudXNlckFnZW50RGlyZWN0aXZlcyB8fCBbXTtcbiAgICBjb25zdCBtZWRpYSA9IHBhcmFtcy5tZWRpYSB8fCB7fTtcbiAgICAvKipcbiAgICAgKiBJbiBhIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBBUEksIHRoZSByZXF1ZXN0IGJvZHkgd2FzIHN0dWZmZWQgaW4gYSBmaWVsZFxuICAgICAqIG5hbWVkIGByZXNvdXJjZWAuICBUaGlzIGNhdXNlZCBsb3RzIG9mIHByb2JsZW1zLCBiZWNhdXNlIGl0J3Mgbm90IHVuY29tbW9uXG4gICAgICogdG8gaGF2ZSBhbiBhY3R1YWwgbmFtZWQgcGFyYW1ldGVyIHJlcXVpcmVkIHdoaWNoIGlzIGFsc28gbmFtZWQgYHJlc291cmNlYC5cbiAgICAgKiBUaGlzIG1lYW50IHRoYXQgdXNlcnMgd291bGQgaGF2ZSB0byB1c2UgYHJlc291cmNlX2AgaW4gdGhvc2UgY2FzZXMsIHdoaWNoXG4gICAgICogcHJldHR5IG11Y2ggbm9ib2R5IGZpZ3VyZXMgb3V0IG9uIHRoZWlyIG93bi4gVGhlIHJlcXVlc3QgYm9keSBpcyBub3dcbiAgICAgKiBkb2N1bWVudGVkIGFzIGJlaW5nIGluIHRoZSBgcmVxdWVzdEJvZHlgIHByb3BlcnR5LCBidXQgd2UgYWxzbyBuZWVkIHRvIGtlZXBcbiAgICAgKiB1c2luZyBgcmVzb3VyY2VgIGZvciByZWFzb25zIG9mIGJhY2stY29tcGF0LiBDYXNlcyB0aGF0IG5lZWQgdG8gYmUgY292ZXJlZFxuICAgICAqIGhlcmU6XG4gICAgICogLSB1c2VyIHByb3ZpZGVzIGp1c3QgYSBgcmVzb3VyY2VgIHdpdGggYSByZXF1ZXN0IGJvZHlcbiAgICAgKiAtIHVzZXIgcHJvdmlkZXMgYm90aCBhIGByZXNvdXJjZWAgYW5kIGEgYHJlc291cmNlX2BcbiAgICAgKiAtIHVzZXIgcHJvdmlkZXMganVzdCBhIGByZXF1ZXN0Qm9keWBcbiAgICAgKiAtIHVzZXIgcHJvdmlkZXMgYm90aCBhIGByZXF1ZXN0Qm9keWAgYW5kIGEgYHJlc291cmNlYFxuICAgICAqL1xuICAgIGxldCByZXNvdXJjZSA9IHBhcmFtcy5yZXF1ZXN0Qm9keTtcbiAgICBpZiAoIXBhcmFtcy5yZXF1ZXN0Qm9keSAmJlxuICAgICAgICBwYXJhbXMucmVzb3VyY2UgJiZcbiAgICAgICAgKCFwYXJhbWV0ZXJzLnJlcXVpcmVkUGFyYW1zLmluY2x1ZGVzKCdyZXNvdXJjZScpIHx8XG4gICAgICAgICAgICB0eXBlb2YgcGFyYW1zLnJlc291cmNlICE9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmVzb3VyY2UgPSBwYXJhbXMucmVzb3VyY2U7XG4gICAgICAgIGRlbGV0ZSBwYXJhbXMucmVzb3VyY2U7XG4gICAgfVxuICAgIGRlbGV0ZSBwYXJhbXMucmVxdWVzdEJvZHk7XG4gICAgbGV0IGF1dGhDbGllbnQgPSBwYXJhbXMuYXV0aCB8fCBvcHRpb25zLmF1dGg7XG4gICAgY29uc3QgZGVmYXVsdE1pbWUgPSB0eXBlb2YgbWVkaWEuYm9keSA9PT0gJ3N0cmluZycgPyAndGV4dC9wbGFpbicgOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcbiAgICBkZWxldGUgcGFyYW1zLm1lZGlhO1xuICAgIGRlbGV0ZSBwYXJhbXMuYXV0aDtcbiAgICAvLyBHcmFiIGhlYWRlcnMgZnJvbSB1c2VyIHByb3ZpZGVkIG9wdGlvbnNcbiAgICBjb25zdCBoZWFkZXJzID0gcGFyYW1zLmhlYWRlcnMgfHwge307XG4gICAgcG9wdWxhdGVBUElIZWFkZXIoaGVhZGVycyk7XG4gICAgZGVsZXRlIHBhcmFtcy5oZWFkZXJzO1xuICAgIC8vIFVuLWFsaWFzIHBhcmFtZXRlcnMgdGhhdCB3ZXJlIG1vZGlmaWVkIGR1ZSB0byBjb25mbGljdHMgd2l0aCByZXNlcnZlZCBuYW1lc1xuICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoa2V5LnNsaWNlKC0xKSA9PT0gJ18nKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXkuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgcGFyYW1zW25ld0tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgIGRlbGV0ZSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIENoZWNrIGZvciBtaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcnMgaW4gdGhlIEFQSSByZXF1ZXN0XG4gICAgY29uc3QgbWlzc2luZ1BhcmFtcyA9IGdldE1pc3NpbmdQYXJhbXMocGFyYW1zLCBwYXJhbWV0ZXJzLnJlcXVpcmVkUGFyYW1zKTtcbiAgICBpZiAobWlzc2luZ1BhcmFtcykge1xuICAgICAgICAvLyBTb21lIHBhcmFtcyBhcmUgbWlzc2luZyAtIHN0b3AgZnVydGhlciBvcGVyYXRpb25zIGFuZCBpbmZvcm0gdGhlXG4gICAgICAgIC8vIGRldmVsb3BlciB3aGljaCByZXF1aXJlZCBwYXJhbXMgYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgcmVxdWVzdFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyczogJyArIG1pc3NpbmdQYXJhbXMuam9pbignLCAnKSk7XG4gICAgfVxuICAgIC8vIFBhcnNlIHVybHNcbiAgICBpZiAob3B0aW9ucy51cmwpIHtcbiAgICAgICAgb3B0aW9ucy51cmwgPSB1cmxUZW1wbGF0ZS5wYXJzZShvcHRpb25zLnVybCkuZXhwYW5kKHBhcmFtcyk7XG4gICAgfVxuICAgIGlmIChwYXJhbWV0ZXJzLm1lZGlhVXJsKSB7XG4gICAgICAgIHBhcmFtZXRlcnMubWVkaWFVcmwgPSB1cmxUZW1wbGF0ZS5wYXJzZShwYXJhbWV0ZXJzLm1lZGlhVXJsKS5leHBhbmQocGFyYW1zKTtcbiAgICB9XG4gICAgLy8gUmV3cml0ZSB1cmwgaWYgcm9vdFVybCBpcyBnbG9iYWxseSBzZXRcbiAgICBpZiAocGFyYW1ldGVycy5jb250ZXh0Ll9vcHRpb25zLnJvb3RVcmwgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBvcHRpb25zLnVybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsVXJsID0gbmV3IFVSTChvcHRpb25zLnVybCk7XG4gICAgICAgIGNvbnN0IHBhdGggPSBvcmlnaW5hbFVybC5ocmVmLnN1YnN0cihvcmlnaW5hbFVybC5vcmlnaW4ubGVuZ3RoKTtcbiAgICAgICAgb3B0aW9ucy51cmwgPSBuZXcgVVJMKHBhdGgsIHBhcmFtZXRlcnMuY29udGV4dC5fb3B0aW9ucy5yb290VXJsKS5ocmVmO1xuICAgIH1cbiAgICAvLyBXaGVuIGZvcm1pbmcgdGhlIHF1ZXJ5c3RyaW5nLCBvdmVycmlkZSB0aGUgc2VyaWFsaXplciBzbyB0aGF0IGFycmF5XG4gICAgLy8gdmFsdWVzIGFyZSBzZXJpYWxpemVkIGxpa2UgdGhpczpcbiAgICAvLyBteVBhcmFtczogWydvbmUnLCAndHdvJ10gLS0tPiAnbXlQYXJhbXM9b25lJm15UGFyYW1zPXR3bydcbiAgICAvLyBUaGlzIHNlcmlhbGl6ZXIgYWxzbyBlbmNvZGVzIHNwYWNlcyBpbiB0aGUgcXVlcnlzdHJpbmcgYXMgYCUyMGAsXG4gICAgLy8gd2hlcmVhcyB0aGUgZGVmYXVsdCBzZXJpYWxpemVyIGluIGdheGlvcyBlbmNvZGVzIHRvIGEgYCtgLlxuICAgIG9wdGlvbnMucGFyYW1zU2VyaWFsaXplciA9IHBhcmFtcyA9PiB7XG4gICAgICAgIHJldHVybiBxcy5zdHJpbmdpZnkocGFyYW1zLCB7IGFycmF5Rm9ybWF0OiAncmVwZWF0JyB9KTtcbiAgICB9O1xuICAgIC8vIGRlbGV0ZSBwYXRoIHBhcmFtcyBmcm9tIHRoZSBwYXJhbXMgb2JqZWN0IHNvIHRoZXkgZG8gbm90IGVuZCB1cCBpbiBxdWVyeVxuICAgIHBhcmFtZXRlcnMucGF0aFBhcmFtcy5mb3JFYWNoKHBhcmFtID0+IGRlbGV0ZSBwYXJhbXNbcGFyYW1dKTtcbiAgICAvLyBpZiBhdXRoQ2xpZW50IGlzIGFjdHVhbGx5IGEgc3RyaW5nLCB1c2UgaXQgYXMgYW4gQVBJIEtFWVxuICAgIGlmICh0eXBlb2YgYXV0aENsaWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGFyYW1zLmtleSA9IHBhcmFtcy5rZXkgfHwgYXV0aENsaWVudDtcbiAgICAgICAgYXV0aENsaWVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbXVsdGlwYXJ0VXBsb2FkKG11bHRpcGFydCkge1xuICAgICAgICBjb25zdCBib3VuZGFyeSA9IHV1aWQudjQoKTtcbiAgICAgICAgY29uc3QgZmluYWxlID0gYC0tJHtib3VuZGFyeX0tLWA7XG4gICAgICAgIGNvbnN0IHJTdHJlYW0gPSBuZXcgc3RyZWFtLlBhc3NUaHJvdWdoKHtcbiAgICAgICAgICAgIGZsdXNoKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKCdcXHJcXG4nKTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goZmluYWxlKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBTdHJlYW0gPSBuZXcgUHJvZ3Jlc3NTdHJlYW0oKTtcbiAgICAgICAgY29uc3QgaXNTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtKG11bHRpcGFydFsxXS5ib2R5KTtcbiAgICAgICAgaGVhZGVyc1snY29udGVudC10eXBlJ10gPSBgbXVsdGlwYXJ0L3JlbGF0ZWQ7IGJvdW5kYXJ5PSR7Ym91bmRhcnl9YDtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIG11bHRpcGFydCkge1xuICAgICAgICAgICAgY29uc3QgcHJlYW1ibGUgPSBgLS0ke2JvdW5kYXJ5fVxcclxcbmNvbnRlbnQtdHlwZTogJHtwYXJ0Wydjb250ZW50LXR5cGUnXX1cXHJcXG5cXHJcXG5gO1xuICAgICAgICAgICAgclN0cmVhbS5wdXNoKHByZWFtYmxlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFydC5ib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJTdHJlYW0ucHVzaChwYXJ0LmJvZHkpO1xuICAgICAgICAgICAgICAgIHJTdHJlYW0ucHVzaCgnXFxyXFxuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBHYXhpb3MgZG9lcyBub3QgbmF0aXZlbHkgc3VwcG9ydCBvblVwbG9hZFByb2dyZXNzIGluIG5vZGUuanMuXG4gICAgICAgICAgICAgICAgLy8gUGlwZSB0aHJvdWdoIHRoZSBwU3RyZWFtIGZpcnN0IHRvIHJlYWQgdGhlIG51bWJlciBvZiBieXRlcyByZWFkXG4gICAgICAgICAgICAgICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRyYWNraW5nIHByb2dyZXNzLlxuICAgICAgICAgICAgICAgIHBTdHJlYW0ub24oJ3Byb2dyZXNzJywgYnl0ZXNSZWFkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub25VcGxvYWRQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vblVwbG9hZFByb2dyZXNzKHsgYnl0ZXNSZWFkIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGFydC5ib2R5LnBpcGUocFN0cmVhbSkucGlwZShyU3RyZWFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzU3RyZWFtKSB7XG4gICAgICAgICAgICByU3RyZWFtLnB1c2goZmluYWxlKTtcbiAgICAgICAgICAgIHJTdHJlYW0ucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLmRhdGEgPSByU3RyZWFtO1xuICAgIH1cbiAgICBmdW5jdGlvbiBicm93c2VyTXVsdGlwYXJ0VXBsb2FkKG11bHRpcGFydCkge1xuICAgICAgICBjb25zdCBib3VuZGFyeSA9IHV1aWQudjQoKTtcbiAgICAgICAgY29uc3QgZmluYWxlID0gYC0tJHtib3VuZGFyeX0tLWA7XG4gICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gYG11bHRpcGFydC9yZWxhdGVkOyBib3VuZGFyeT0ke2JvdW5kYXJ5fWA7XG4gICAgICAgIGxldCBjb250ZW50ID0gJyc7XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBtdWx0aXBhcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZWFtYmxlID0gYC0tJHtib3VuZGFyeX1cXHJcXG5jb250ZW50LXR5cGU6ICR7cGFydFsnY29udGVudC10eXBlJ119XFxyXFxuXFxyXFxuYDtcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gcHJlYW1ibGU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcnQuYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9IHBhcnQuYm9keTtcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9ICdcXHJcXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRlbnQgKz0gZmluYWxlO1xuICAgICAgICBvcHRpb25zLmRhdGEgPSBjb250ZW50O1xuICAgIH1cbiAgICBpZiAocGFyYW1ldGVycy5tZWRpYVVybCAmJiBtZWRpYS5ib2R5KSB7XG4gICAgICAgIG9wdGlvbnMudXJsID0gcGFyYW1ldGVycy5tZWRpYVVybDtcbiAgICAgICAgaWYgKHJlc291cmNlKSB7XG4gICAgICAgICAgICBwYXJhbXMudXBsb2FkVHlwZSA9ICdtdWx0aXBhcnQnO1xuICAgICAgICAgICAgY29uc3QgbXVsdGlwYXJ0ID0gW1xuICAgICAgICAgICAgICAgIHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgYm9keTogSlNPTi5zdHJpbmdpZnkocmVzb3VyY2UpIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogbWVkaWEubWltZVR5cGUgfHwgKHJlc291cmNlICYmIHJlc291cmNlLm1pbWVUeXBlKSB8fCBkZWZhdWx0TWltZSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogbWVkaWEuYm9keSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmICghKDAsIGlzYnJvd3Nlcl8xLmlzQnJvd3NlcikoKSkge1xuICAgICAgICAgICAgICAgIC8vIGdheGlvcyBkb2Vzbid0IHN1cHBvcnQgbXVsdGlwYXJ0L3JlbGF0ZWQgdXBsb2Fkcywgc28gaXQgaGFzIHRvXG4gICAgICAgICAgICAgICAgLy8gYmUgaW1wbGVtZW50ZWQgaGVyZS5cbiAgICAgICAgICAgICAgICBtdWx0aXBhcnRVcGxvYWQobXVsdGlwYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyb3dzZXJNdWx0aXBhcnRVcGxvYWQobXVsdGlwYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhcmFtcy51cGxvYWRUeXBlID0gJ21lZGlhJztcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaGVhZGVycywgeyAnY29udGVudC10eXBlJzogbWVkaWEubWltZVR5cGUgfHwgZGVmYXVsdE1pbWUgfSk7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGEgPSBtZWRpYS5ib2R5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvcHRpb25zLmRhdGEgPSByZXNvdXJjZSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9wdGlvbnMuaGVhZGVycyA9IGV4dGVuZCh0cnVlLCBvcHRpb25zLmhlYWRlcnMgfHwge30sIGhlYWRlcnMpO1xuICAgIG9wdGlvbnMucGFyYW1zID0gcGFyYW1zO1xuICAgIGlmICghKDAsIGlzYnJvd3Nlcl8xLmlzQnJvd3NlcikoKSkge1xuICAgICAgICBvcHRpb25zLmhlYWRlcnNbJ0FjY2VwdC1FbmNvZGluZyddID0gJ2d6aXAnO1xuICAgICAgICBvcHRpb25zLnVzZXJBZ2VudERpcmVjdGl2ZXMucHVzaCh7XG4gICAgICAgICAgICBwcm9kdWN0OiAnZ29vZ2xlLWFwaS1ub2RlanMtY2xpZW50JyxcbiAgICAgICAgICAgIHZlcnNpb246IHBrZy52ZXJzaW9uLFxuICAgICAgICAgICAgY29tbWVudDogJ2d6aXAnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdXNlckFnZW50ID0gb3B0aW9ucy51c2VyQWdlbnREaXJlY3RpdmVzXG4gICAgICAgICAgICAubWFwKGQgPT4ge1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBgJHtkLnByb2R1Y3R9LyR7ZC52ZXJzaW9ufWA7XG4gICAgICAgICAgICBpZiAoZC5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgbGluZSArPSBgICgke2QuY29tbWVudH0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzWydVc2VyLUFnZW50J10gPSB1c2VyQWdlbnQ7XG4gICAgfVxuICAgIC8vIEJ5IGRlZmF1bHQgZ2F4aW9zIHRyZWF0cyBhbnkgMnh4IGFzIHZhbGlkLCBhbmQgYWxsIG5vbiAyeHggc3RhdHVzXG4gICAgLy8gY29kZXMgYXMgZXJyb3JzLiAgVGhpcyBpcyBhIHByb2JsZW0gZm9yIEhUVFAgMzA0cyB3aGVuIHVzZWQgYWxvbmdcbiAgICAvLyB3aXRoIGFuIGVUYWcuXG4gICAgaWYgKCFvcHRpb25zLnZhbGlkYXRlU3RhdHVzKSB7XG4gICAgICAgIG9wdGlvbnMudmFsaWRhdGVTdGF0dXMgPSBzdGF0dXMgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCkgfHwgc3RhdHVzID09PSAzMDQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFJldHJ5IGJ5IGRlZmF1bHRcbiAgICBvcHRpb25zLnJldHJ5ID0gb3B0aW9ucy5yZXRyeSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMucmV0cnk7XG4gICAgZGVsZXRlIG9wdGlvbnMuYXV0aDsgLy8gaXMgb3ZlcnJpZGRlbiBieSBvdXIgYXV0aCBjb2RlXG4gICAgLy8gUGVyZm9ybSB0aGUgSFRUUCByZXF1ZXN0LiAgTk9URTogdGhpcyBmdW5jdGlvbiB1c2VkIHRvIHJldHVybiBhXG4gICAgLy8gbWlrZWFsL3JlcXVlc3Qgb2JqZWN0LiBTaW5jZSB0aGUgdHJhbnNpdGlvbiB0byBBeGlvcywgdGhlIG1ldGhvZCBpc1xuICAgIC8vIG5vdyB2b2lkLiAgVGhpcyBtYXkgYmUgYSBzb3VyY2Ugb2YgY29uZnVzaW9uIGZvciB1c2VycyB1cGdyYWRpbmcgZnJvbVxuICAgIC8vIHZlcnNpb24gMjQuMCAtPiAyNS4wIG9yIHVwLlxuICAgIGlmIChhdXRoQ2xpZW50ICYmIHR5cGVvZiBhdXRoQ2xpZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAob3B0aW9ucy5odHRwMikge1xuICAgICAgICAgICAgY29uc3QgYXV0aEhlYWRlcnMgPSBhd2FpdCBhdXRoQ2xpZW50LmdldFJlcXVlc3RIZWFkZXJzKG9wdGlvbnMudXJsKTtcbiAgICAgICAgICAgIGNvbnN0IG1vb09wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICAgICAgICAgIG1vb09wdHMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24obW9vT3B0cy5oZWFkZXJzLCBhdXRoSGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4gaDIucmVxdWVzdChtb29PcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhdXRoQ2xpZW50LnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkRlZmF1bHRUcmFuc3BvcnRlcigpLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBCYXNpYyBQYXNzdGhyb3VnaCBTdHJlYW0gdGhhdCByZWNvcmRzIHRoZSBudW1iZXIgb2YgYnl0ZXMgcmVhZFxuICogZXZlcnkgdGltZSB0aGUgY3Vyc29yIGlzIG1vdmVkLlxuICovXG5jbGFzcyBQcm9ncmVzc1N0cmVhbSBleHRlbmRzIHN0cmVhbS5UcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmJ5dGVzUmVhZCA9IDA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuYnl0ZXNSZWFkICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgdGhpcy5lbWl0KCdwcm9ncmVzcycsIHRoaXMuYnl0ZXNSZWFkKTtcbiAgICAgICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5mdW5jdGlvbiBwb3B1bGF0ZUFQSUhlYWRlcihoZWFkZXJzKSB7XG4gICAgLy8gVE9ETzogd2Ugc2hvdWxkIGV2ZW50dWFsbHkgdGhpbmsgYWJvdXQgYWRkaW5nIGJyb3dzZXIgc3VwcG9ydCBmb3IgdGhpc1xuICAgIC8vIHBvcHVsYXRpbmcgdGhlIGdsLXdlYiBoZWFkZXIgKHdlYiBzdXBwb3J0IHNob3VsZCBhbHNvIGJlIGFkZGVkIHRvXG4gICAgLy8gZ29vZ2xlLWF1dGgtbGlicmFyeS1ub2RlanMpLlxuICAgIGlmICghKDAsIGlzYnJvd3Nlcl8xLmlzQnJvd3NlcikoKSkge1xuICAgICAgICBoZWFkZXJzWyd4LWdvb2ctYXBpLWNsaWVudCddID0gYGdkY2wvJHtwa2cudmVyc2lvbn0gZ2wtbm9kZS8ke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaXJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/apirequest.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/build/src/authplus.js":
/*!***************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/authplus.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthPlus = void 0;\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(api)/../node_modules/google-auth-library/build/src/index.js\");\nclass AuthPlus extends google_auth_library_1.GoogleAuth {\n    constructor() {\n        super(...arguments);\n        this.JWT = google_auth_library_1.JWT;\n        this.Compute = google_auth_library_1.Compute;\n        this.OAuth2 = google_auth_library_1.OAuth2Client;\n        this.GoogleAuth = google_auth_library_1.GoogleAuth;\n        this.AwsClient = google_auth_library_1.AwsClient;\n        this.IdentityPoolClient = google_auth_library_1.IdentityPoolClient;\n        this.ExternalAccountClient = google_auth_library_1.ExternalAccountClient;\n    }\n    /**\n     * Override getClient(), memoizing an instance of auth for\n     * subsequent calls to getProjectId().\n     */\n    async getClient(options) {\n        this._cachedAuth = new google_auth_library_1.GoogleAuth(options);\n        return this._cachedAuth.getClient();\n    }\n    getProjectId(callback) {\n        if (callback) {\n            return this._cachedAuth\n                ? this._cachedAuth.getProjectId(callback)\n                : super.getProjectId(callback);\n        }\n        else {\n            return this._cachedAuth\n                ? this._cachedAuth.getProjectId()\n                : super.getProjectId();\n        }\n    }\n}\nexports.AuthPlus = AuthPlus;\n//# sourceMappingURL=authplus.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9hdXRocGx1cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsOEJBQThCLG1CQUFPLENBQUMseUZBQXFCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW5lLXVzZXItdG8tc2hlZXRzLy4uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvYXV0aHBsdXMuanM/YmFjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdXRoUGx1cyA9IHZvaWQgMDtcbmNvbnN0IGdvb2dsZV9hdXRoX2xpYnJhcnlfMSA9IHJlcXVpcmUoXCJnb29nbGUtYXV0aC1saWJyYXJ5XCIpO1xuY2xhc3MgQXV0aFBsdXMgZXh0ZW5kcyBnb29nbGVfYXV0aF9saWJyYXJ5XzEuR29vZ2xlQXV0aCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuSldUID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkpXVDtcbiAgICAgICAgdGhpcy5Db21wdXRlID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkNvbXB1dGU7XG4gICAgICAgIHRoaXMuT0F1dGgyID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLk9BdXRoMkNsaWVudDtcbiAgICAgICAgdGhpcy5Hb29nbGVBdXRoID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGg7XG4gICAgICAgIHRoaXMuQXdzQ2xpZW50ID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkF3c0NsaWVudDtcbiAgICAgICAgdGhpcy5JZGVudGl0eVBvb2xDbGllbnQgPSBnb29nbGVfYXV0aF9saWJyYXJ5XzEuSWRlbnRpdHlQb29sQ2xpZW50O1xuICAgICAgICB0aGlzLkV4dGVybmFsQWNjb3VudENsaWVudCA9IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5FeHRlcm5hbEFjY291bnRDbGllbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGdldENsaWVudCgpLCBtZW1vaXppbmcgYW4gaW5zdGFuY2Ugb2YgYXV0aCBmb3JcbiAgICAgKiBzdWJzZXF1ZW50IGNhbGxzIHRvIGdldFByb2plY3RJZCgpLlxuICAgICAqL1xuICAgIGFzeW5jIGdldENsaWVudChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlZEF1dGggPSBuZXcgZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGgob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRBdXRoLmdldENsaWVudCgpO1xuICAgIH1cbiAgICBnZXRQcm9qZWN0SWQoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkQXV0aFxuICAgICAgICAgICAgICAgID8gdGhpcy5fY2FjaGVkQXV0aC5nZXRQcm9qZWN0SWQoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgOiBzdXBlci5nZXRQcm9qZWN0SWQoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZEF1dGhcbiAgICAgICAgICAgICAgICA/IHRoaXMuX2NhY2hlZEF1dGguZ2V0UHJvamVjdElkKClcbiAgICAgICAgICAgICAgICA6IHN1cGVyLmdldFByb2plY3RJZCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BdXRoUGx1cyA9IEF1dGhQbHVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aHBsdXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/authplus.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/build/src/discovery.js":
/*!****************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/discovery.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Discovery = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(api)/../node_modules/google-auth-library/build/src/index.js\");\nconst resolve = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(api)/../node_modules/googleapis-common/build/src/apirequest.js\");\nconst endpoint_1 = __webpack_require__(/*! ./endpoint */ \"(api)/../node_modules/googleapis-common/build/src/endpoint.js\");\nconst readFile = util.promisify(fs.readFile);\nclass Discovery {\n    /**\n     * Discovery for discovering API endpoints\n     *\n     * @param options Options for discovery\n     */\n    constructor(options) {\n        this.transporter = new google_auth_library_1.DefaultTransporter();\n        this.options = options || {};\n    }\n    /**\n     * Generate and Endpoint from an endpoint schema object.\n     *\n     * @param schema The schema from which to generate the Endpoint.\n     * @return A function that creates an endpoint.\n     */\n    makeEndpoint(schema) {\n        return (options) => {\n            const ep = new endpoint_1.Endpoint(options);\n            ep.applySchema(ep, schema, schema, ep);\n            return ep;\n        };\n    }\n    /**\n     * Log output of generator. Works just like console.log\n     */\n    log(...args) {\n        if (this.options && this.options.debug) {\n            console.log(...args);\n        }\n    }\n    /**\n     * Generate all APIs and return as in-memory object.\n     * @param discoveryUrl\n     */\n    async discoverAllAPIs(discoveryUrl) {\n        const headers = this.options.includePrivate\n            ? {}\n            : { 'X-User-Ip': '0.0.0.0' };\n        const res = await this.transporter.request({\n            url: discoveryUrl,\n            headers,\n        });\n        const items = res.data.items;\n        const apis = await Promise.all(items.map(async (api) => {\n            const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n            return { api, endpointCreator };\n        }));\n        const versionIndex = {};\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const apisIndex = {};\n        for (const set of apis) {\n            if (!apisIndex[set.api.name]) {\n                versionIndex[set.api.name] = {};\n                apisIndex[set.api.name] = (options) => {\n                    const type = typeof options;\n                    let version;\n                    if (type === 'string') {\n                        version = options;\n                        options = {};\n                    }\n                    else if (type === 'object') {\n                        version = options.version;\n                        delete options.version;\n                    }\n                    else {\n                        throw new Error('Argument error: Accepts only string or object');\n                    }\n                    try {\n                        const ep = set.endpointCreator(options, this);\n                        return Object.freeze(ep); // create new & freeze\n                    }\n                    catch (e) {\n                        throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n                    }\n                };\n            }\n            versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n        }\n        return apisIndex;\n    }\n    /**\n     * Generate API file given discovery URL\n     *\n     * @param apiDiscoveryUrl URL or filename of discovery doc for API\n     * @returns A promise that resolves with a function that creates the endpoint\n     */\n    async discoverAPI(apiDiscoveryUrl) {\n        if (typeof apiDiscoveryUrl === 'string') {\n            const parts = resolve.parse(apiDiscoveryUrl);\n            if (apiDiscoveryUrl && !parts.protocol) {\n                this.log('Reading from file ' + apiDiscoveryUrl);\n                const file = await readFile(apiDiscoveryUrl, { encoding: 'utf8' });\n                return this.makeEndpoint(JSON.parse(file));\n            }\n            else {\n                this.log('Requesting ' + apiDiscoveryUrl);\n                const res = await this.transporter.request({\n                    url: apiDiscoveryUrl,\n                });\n                return this.makeEndpoint(res.data);\n            }\n        }\n        else {\n            const options = apiDiscoveryUrl;\n            this.log('Requesting ' + options.url);\n            const url = options.url;\n            delete options.url;\n            const parameters = {\n                options: { url, method: 'GET' },\n                requiredParams: [],\n                pathParams: [],\n                params: options,\n                context: { google: { _options: {} }, _options: {} },\n            };\n            const res = await (0, apirequest_1.createAPIRequest)(parameters);\n            return this.makeEndpoint(res.data);\n        }\n    }\n}\nexports.Discovery = Discovery;\n//# sourceMappingURL=discovery.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/discovery.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/build/src/endpoint.js":
/*!***************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/endpoint.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Endpoint = void 0;\nconst apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(api)/../node_modules/googleapis-common/build/src/apirequest.js\");\nclass Endpoint {\n    constructor(options) {\n        this._options = options || {};\n    }\n    /**\n     * Given a schema, add methods and resources to a target.\n     *\n     * @param {object} target The target to which to apply the schema.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods and\n     * resources.\n     * @param {object} context The context to add to each method.\n     */\n    applySchema(target, rootSchema, schema, context) {\n        this.applyMethodsFromSchema(target, rootSchema, schema, context);\n        if (schema.resources) {\n            for (const resourceName in schema.resources) {\n                if (Object.prototype.hasOwnProperty.call(schema.resources, resourceName)) {\n                    const resource = schema.resources[resourceName];\n                    if (!target[resourceName]) {\n                        target[resourceName] = {};\n                    }\n                    this.applySchema(target[resourceName], rootSchema, resource, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a schema, add methods to a target.\n     *\n     * @param {object} target The target to which to apply the methods.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods.\n     * @param {object} context The context to add to each method.\n     */\n    applyMethodsFromSchema(target, rootSchema, schema, context) {\n        if (schema.methods) {\n            for (const name in schema.methods) {\n                if (Object.prototype.hasOwnProperty.call(schema.methods, name)) {\n                    const method = schema.methods[name];\n                    target[name] = this.makeMethod(rootSchema, method, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a method schema, add a method to a target.\n     *\n     * @param target The target to which to add the method.\n     * @param schema The top-level schema that contains the rootUrl, etc.\n     * @param method The method schema from which to generate the method.\n     * @param context The context to add to the method.\n     */\n    makeMethod(schema, method, context) {\n        return (paramsOrCallback, callback) => {\n            const params = typeof paramsOrCallback === 'function' ? {} : paramsOrCallback;\n            callback =\n                typeof paramsOrCallback === 'function'\n                    ? paramsOrCallback\n                    : callback;\n            const schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);\n            const parameters = {\n                options: {\n                    url: schemaUrl.substring(1, schemaUrl.length - 1),\n                    method: method.httpMethod,\n                },\n                params,\n                requiredParams: method.parameterOrder || [],\n                pathParams: this.getPathParams(method.parameters),\n                context,\n            };\n            if (method.mediaUpload &&\n                method.mediaUpload.protocols &&\n                method.mediaUpload.protocols.simple &&\n                method.mediaUpload.protocols.simple.path) {\n                const mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n                parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n            }\n            if (!callback) {\n                return (0, apirequest_1.createAPIRequest)(parameters);\n            }\n            (0, apirequest_1.createAPIRequest)(parameters, callback);\n            return;\n        };\n    }\n    getPathParams(params) {\n        const pathParams = new Array();\n        if (typeof params !== 'object') {\n            params = {};\n        }\n        Object.keys(params).forEach(key => {\n            if (params[key].location === 'path') {\n                pathParams.push(key);\n            }\n        });\n        return pathParams;\n    }\n}\nexports.Endpoint = Endpoint;\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n * replace double slashes with single slash (except in https://)\n * @private\n * @param  input URL to build from\n * @return Resulting built URL\n */\nfunction buildurl(input) {\n    return input ? `'${input}'`.replace(/([^:]\\/)\\/+/g, '$1') : '';\n}\n//# sourceMappingURL=endpoint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9lbmRwb2ludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIscUJBQXFCLG1CQUFPLENBQUMscUZBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsTUFBTTtBQUM3QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGluZS11c2VyLXRvLXNoZWV0cy8uLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2VuZHBvaW50LmpzPzg3MTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW5kcG9pbnQgPSB2b2lkIDA7XG5jb25zdCBhcGlyZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9hcGlyZXF1ZXN0XCIpO1xuY2xhc3MgRW5kcG9pbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgc2NoZW1hLCBhZGQgbWV0aG9kcyBhbmQgcmVzb3VyY2VzIHRvIGEgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCBUaGUgdGFyZ2V0IHRvIHdoaWNoIHRvIGFwcGx5IHRoZSBzY2hlbWEuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJvb3RTY2hlbWEgVGhlIHRvcC1sZXZlbCBzY2hlbWEsIHNvIHdlIGRvbid0IGxvc2UgdHJhY2sgb2YgaXRcbiAgICAgKiBkdXJpbmcgcmVjdXJzaW9uLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWEgVGhlIGN1cnJlbnQgc2NoZW1hIGZyb20gd2hpY2ggdG8gZXh0cmFjdCBtZXRob2RzIGFuZFxuICAgICAqIHJlc291cmNlcy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgY29udGV4dCB0byBhZGQgdG8gZWFjaCBtZXRob2QuXG4gICAgICovXG4gICAgYXBwbHlTY2hlbWEodGFyZ2V0LCByb290U2NoZW1hLCBzY2hlbWEsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5hcHBseU1ldGhvZHNGcm9tU2NoZW1hKHRhcmdldCwgcm9vdFNjaGVtYSwgc2NoZW1hLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHNjaGVtYS5yZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2VOYW1lIGluIHNjaGVtYS5yZXNvdXJjZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNjaGVtYS5yZXNvdXJjZXMsIHJlc291cmNlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBzY2hlbWEucmVzb3VyY2VzW3Jlc291cmNlTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0W3Jlc291cmNlTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtyZXNvdXJjZU5hbWVdID0ge307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVNjaGVtYSh0YXJnZXRbcmVzb3VyY2VOYW1lXSwgcm9vdFNjaGVtYSwgcmVzb3VyY2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHNjaGVtYSwgYWRkIG1ldGhvZHMgdG8gYSB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gd2hpY2ggdG8gYXBwbHkgdGhlIG1ldGhvZHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJvb3RTY2hlbWEgVGhlIHRvcC1sZXZlbCBzY2hlbWEsIHNvIHdlIGRvbid0IGxvc2UgdHJhY2sgb2YgaXRcbiAgICAgKiBkdXJpbmcgcmVjdXJzaW9uLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWEgVGhlIGN1cnJlbnQgc2NoZW1hIGZyb20gd2hpY2ggdG8gZXh0cmFjdCBtZXRob2RzLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGFkZCB0byBlYWNoIG1ldGhvZC5cbiAgICAgKi9cbiAgICBhcHBseU1ldGhvZHNGcm9tU2NoZW1hKHRhcmdldCwgcm9vdFNjaGVtYSwgc2NoZW1hLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChzY2hlbWEubWV0aG9kcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHNjaGVtYS5tZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzY2hlbWEubWV0aG9kcywgbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gc2NoZW1hLm1ldGhvZHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IHRoaXMubWFrZU1ldGhvZChyb290U2NoZW1hLCBtZXRob2QsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIG1ldGhvZCBzY2hlbWEsIGFkZCBhIG1ldGhvZCB0byBhIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCB0byB3aGljaCB0byBhZGQgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gc2NoZW1hIFRoZSB0b3AtbGV2ZWwgc2NoZW1hIHRoYXQgY29udGFpbnMgdGhlIHJvb3RVcmwsIGV0Yy5cbiAgICAgKiBAcGFyYW0gbWV0aG9kIFRoZSBtZXRob2Qgc2NoZW1hIGZyb20gd2hpY2ggdG8gZ2VuZXJhdGUgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCBUaGUgY29udGV4dCB0byBhZGQgdG8gdGhlIG1ldGhvZC5cbiAgICAgKi9cbiAgICBtYWtlTWV0aG9kKHNjaGVtYSwgbWV0aG9kLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiAocGFyYW1zT3JDYWxsYmFjaywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHR5cGVvZiBwYXJhbXNPckNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8ge30gOiBwYXJhbXNPckNhbGxiYWNrO1xuICAgICAgICAgICAgY2FsbGJhY2sgPVxuICAgICAgICAgICAgICAgIHR5cGVvZiBwYXJhbXNPckNhbGxiYWNrID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gcGFyYW1zT3JDYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICA6IGNhbGxiYWNrO1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hVXJsID0gYnVpbGR1cmwoc2NoZW1hLnJvb3RVcmwgKyBzY2hlbWEuc2VydmljZVBhdGggKyBtZXRob2QucGF0aCk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzY2hlbWFVcmwuc3Vic3RyaW5nKDEsIHNjaGVtYVVybC5sZW5ndGggLSAxKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QuaHR0cE1ldGhvZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZFBhcmFtczogbWV0aG9kLnBhcmFtZXRlck9yZGVyIHx8IFtdLFxuICAgICAgICAgICAgICAgIHBhdGhQYXJhbXM6IHRoaXMuZ2V0UGF0aFBhcmFtcyhtZXRob2QucGFyYW1ldGVycyksXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobWV0aG9kLm1lZGlhVXBsb2FkICYmXG4gICAgICAgICAgICAgICAgbWV0aG9kLm1lZGlhVXBsb2FkLnByb3RvY29scyAmJlxuICAgICAgICAgICAgICAgIG1ldGhvZC5tZWRpYVVwbG9hZC5wcm90b2NvbHMuc2ltcGxlICYmXG4gICAgICAgICAgICAgICAgbWV0aG9kLm1lZGlhVXBsb2FkLnByb3RvY29scy5zaW1wbGUucGF0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhVXJsID0gYnVpbGR1cmwoc2NoZW1hLnJvb3RVcmwgKyBtZXRob2QubWVkaWFVcGxvYWQucHJvdG9jb2xzLnNpbXBsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLm1lZGlhVXJsID0gbWVkaWFVcmwuc3Vic3RyaW5nKDEsIG1lZGlhVXJsLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgYXBpcmVxdWVzdF8xLmNyZWF0ZUFQSVJlcXVlc3QpKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKDAsIGFwaXJlcXVlc3RfMS5jcmVhdGVBUElSZXF1ZXN0KShwYXJhbWV0ZXJzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFBhdGhQYXJhbXMocGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJhbXNba2V5XS5sb2NhdGlvbiA9PT0gJ3BhdGgnKSB7XG4gICAgICAgICAgICAgICAgcGF0aFBhcmFtcy5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGF0aFBhcmFtcztcbiAgICB9XG59XG5leHBvcnRzLkVuZHBvaW50ID0gRW5kcG9pbnQ7XG4vKipcbiAqIEJ1aWxkIGEgc3RyaW5nIHVzZWQgdG8gY3JlYXRlIGEgVVJMIGZyb20gdGhlIGRpc2NvdmVyeSBkb2MgcHJvdmlkZWQgVVJMLlxuICogcmVwbGFjZSBkb3VibGUgc2xhc2hlcyB3aXRoIHNpbmdsZSBzbGFzaCAoZXhjZXB0IGluIGh0dHBzOi8vKVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgaW5wdXQgVVJMIHRvIGJ1aWxkIGZyb21cbiAqIEByZXR1cm4gUmVzdWx0aW5nIGJ1aWx0IFVSTFxuICovXG5mdW5jdGlvbiBidWlsZHVybChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA/IGAnJHtpbnB1dH0nYC5yZXBsYWNlKC8oW146XVxcLylcXC8rL2csICckMScpIDogJyc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmRwb2ludC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/endpoint.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/build/src/http2.js":
/*!************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/http2.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.closeSession = exports.request = exports.sessions = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst qs = __webpack_require__(/*! qs */ \"(api)/../node_modules/qs/lib/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(api)/../node_modules/extend/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst common_1 = __webpack_require__(/*! gaxios/build/src/common */ \"(api)/../node_modules/gaxios/build/src/common.js\");\nconst { HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_STATUS, } = http2.constants;\nconst DEBUG = !!process.env.HTTP2_DEBUG;\n/**\n * List of sessions current in use.\n * @private\n */\nexports.sessions = {};\n/**\n * Public method to make an http2 request.\n * @param config - Request options.\n */\nasync function request(config) {\n    const opts = extend(true, {}, config);\n    opts.validateStatus = opts.validateStatus || validateStatus;\n    opts.responseType = opts.responseType || 'json';\n    const url = new url_1.URL(opts.url);\n    // Check for an existing session to this host, or go create a new one.\n    const sessionData = _getClient(url.host);\n    // Since we're using this session, clear the timeout handle to ensure\n    // it stays in memory and connected for a while further.\n    if (sessionData.timeoutHandle !== undefined) {\n        clearTimeout(sessionData.timeoutHandle);\n    }\n    // Assemble the querystring based on config.params.  We're using the\n    // `qs` module to make life a little easier.\n    let pathWithQs = url.pathname;\n    if (config.params && Object.keys(config.params).length > 0) {\n        const serializer = config.paramsSerializer || qs.stringify;\n        const q = serializer(opts.params);\n        pathWithQs += `?${q}`;\n    }\n    // Assemble the headers based on basic HTTP2 primitives (path, method) and\n    // custom headers sent from the consumer.  Note: I am using `Object.assign`\n    // here making the assumption these objects are not deep.  If it turns out\n    // they are, we may need to use the `extend` npm module for deep cloning.\n    const headers = Object.assign({}, opts.headers, {\n        [HTTP2_HEADER_PATH]: pathWithQs,\n        [HTTP2_HEADER_METHOD]: config.method || 'GET',\n    });\n    // NOTE: This is working around an upstream bug in `apirequest.ts`. The\n    // request path assumes that the `content-type` header is going to be set in\n    // the underlying HTTP Client. This hack provides bug for bug compatability\n    // with this bug in gaxios:\n    // https://github.com/googleapis/gaxios/blob/main/src/gaxios.ts#L202\n    if (!headers[HTTP2_HEADER_CONTENT_TYPE]) {\n        if (opts.responseType !== 'text') {\n            headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/json';\n        }\n    }\n    const res = {\n        config,\n        request: {},\n        headers: [],\n        status: 0,\n        data: {},\n        statusText: '',\n    };\n    const chunks = [];\n    const session = sessionData.session;\n    let req;\n    return new Promise((resolve, reject) => {\n        try {\n            req = session\n                .request(headers)\n                .on('response', headers => {\n                res.headers = headers;\n                res.status = Number(headers[HTTP2_HEADER_STATUS]);\n                let stream = req;\n                if (headers[HTTP2_HEADER_CONTENT_ENCODING] === 'gzip') {\n                    stream = req.pipe(zlib.createGunzip());\n                }\n                if (opts.responseType === 'stream') {\n                    res.data = stream;\n                    resolve(res);\n                    return;\n                }\n                stream\n                    .on('data', d => {\n                    chunks.push(d);\n                })\n                    .on('error', err => {\n                    reject(err);\n                    return;\n                })\n                    .on('end', () => {\n                    const buf = Buffer.concat(chunks);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    let data = buf;\n                    if (buf) {\n                        if (opts.responseType === 'json') {\n                            try {\n                                data = JSON.parse(buf.toString('utf8'));\n                            }\n                            catch (_a) {\n                                data = buf.toString('utf8');\n                            }\n                        }\n                        else if (opts.responseType === 'text') {\n                            data = buf.toString('utf8');\n                        }\n                        else if (opts.responseType === 'arraybuffer') {\n                            data = buf.buffer;\n                        }\n                        res.data = data;\n                    }\n                    if (!opts.validateStatus(res.status)) {\n                        let message = `Request failed with status code ${res.status}. `;\n                        if (res.data && typeof res.data === 'object') {\n                            const body = util.inspect(res.data, { depth: 5 });\n                            message = `${message}\\n'${body}`;\n                        }\n                        reject(new common_1.GaxiosError(message, opts, res));\n                    }\n                    resolve(res);\n                    return;\n                });\n            })\n                .on('error', e => {\n                reject(e);\n                return;\n            });\n        }\n        catch (e) {\n            closeSession(url);\n            reject(e);\n        }\n        res.request = req;\n        // If data was provided, write it to the request in the form of\n        // a stream, string data, or a basic object.\n        if (config.data) {\n            if (config.data instanceof stream_1.Stream) {\n                config.data.pipe(req);\n            }\n            else if (typeof config.data === 'string') {\n                const data = Buffer.from(config.data);\n                req.end(data);\n            }\n            else if (typeof config.data === 'object') {\n                const data = JSON.stringify(config.data);\n                req.end(data);\n            }\n        }\n        // Create a timeout so the Http2Session will be cleaned up after\n        // a period of non-use. 500 milliseconds was chosen because it's\n        // a nice round number, and I don't know what would be a better\n        // choice. Keeping this channel open will hold a file descriptor\n        // which will prevent the process from exiting.\n        sessionData.timeoutHandle = setTimeout(() => {\n            closeSession(url);\n        }, 500);\n    });\n}\nexports.request = request;\n/**\n * By default, throw for any non-2xx status code\n * @param status - status code from the HTTP response\n */\nfunction validateStatus(status) {\n    return status >= 200 && status < 300;\n}\n/**\n * Obtain an existing h2 session or go create a new one.\n * @param host - The hostname to which the session belongs.\n */\nfunction _getClient(host) {\n    if (!exports.sessions[host]) {\n        if (DEBUG) {\n            console.log(`Creating client for ${host}`);\n        }\n        const session = http2.connect(`https://${host}`);\n        session\n            .on('error', e => {\n            console.error(`*ERROR*: ${e}`);\n            delete exports.sessions[host];\n        })\n            .on('goaway', (errorCode, lastStreamId) => {\n            console.error(`*GOAWAY*: ${errorCode} : ${lastStreamId}`);\n            delete exports.sessions[host];\n        });\n        exports.sessions[host] = { session };\n    }\n    else {\n        if (DEBUG) {\n            console.log(`Used cached client for ${host}`);\n        }\n    }\n    return exports.sessions[host];\n}\nasync function closeSession(url) {\n    const sessionData = exports.sessions[url.host];\n    if (!sessionData) {\n        return;\n    }\n    const { session } = sessionData;\n    delete exports.sessions[url.host];\n    if (DEBUG) {\n        console.error(`Closing ${url.host}`);\n    }\n    session.close(() => {\n        if (DEBUG) {\n            console.error(`Closed ${url.host}`);\n        }\n    });\n    setTimeout(() => {\n        if (session && !session.destroyed) {\n            if (DEBUG) {\n                console.log(`Forcing close ${url.host}`);\n            }\n            if (session) {\n                session.destroy();\n            }\n        }\n    }, 1000);\n}\nexports.closeSession = closeSession;\n//# sourceMappingURL=http2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/http2.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/build/src/index.js":
/*!************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Endpoint = exports.Discovery = exports.AuthPlus = exports.createAPIRequest = exports.getAPI = exports.GaxiosError = exports.Gaxios = exports.AwsClient = exports.IdentityPoolClient = exports.BaseExternalAccountClient = exports.ExternalAccountClient = exports.GoogleAuth = exports.DefaultTransporter = exports.UserRefreshClient = exports.Compute = exports.JWT = exports.OAuth2Client = void 0;\nvar google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(api)/../node_modules/google-auth-library/build/src/index.js\");\nObject.defineProperty(exports, \"OAuth2Client\", ({ enumerable: true, get: function () { return google_auth_library_1.OAuth2Client; } }));\nObject.defineProperty(exports, \"JWT\", ({ enumerable: true, get: function () { return google_auth_library_1.JWT; } }));\nObject.defineProperty(exports, \"Compute\", ({ enumerable: true, get: function () { return google_auth_library_1.Compute; } }));\nObject.defineProperty(exports, \"UserRefreshClient\", ({ enumerable: true, get: function () { return google_auth_library_1.UserRefreshClient; } }));\nObject.defineProperty(exports, \"DefaultTransporter\", ({ enumerable: true, get: function () { return google_auth_library_1.DefaultTransporter; } }));\nObject.defineProperty(exports, \"GoogleAuth\", ({ enumerable: true, get: function () { return google_auth_library_1.GoogleAuth; } }));\nObject.defineProperty(exports, \"ExternalAccountClient\", ({ enumerable: true, get: function () { return google_auth_library_1.ExternalAccountClient; } }));\nObject.defineProperty(exports, \"BaseExternalAccountClient\", ({ enumerable: true, get: function () { return google_auth_library_1.BaseExternalAccountClient; } }));\nObject.defineProperty(exports, \"IdentityPoolClient\", ({ enumerable: true, get: function () { return google_auth_library_1.IdentityPoolClient; } }));\nObject.defineProperty(exports, \"AwsClient\", ({ enumerable: true, get: function () { return google_auth_library_1.AwsClient; } }));\nvar gaxios_1 = __webpack_require__(/*! gaxios */ \"(api)/../node_modules/gaxios/build/src/index.js\");\nObject.defineProperty(exports, \"Gaxios\", ({ enumerable: true, get: function () { return gaxios_1.Gaxios; } }));\nObject.defineProperty(exports, \"GaxiosError\", ({ enumerable: true, get: function () { return gaxios_1.GaxiosError; } }));\nvar apiIndex_1 = __webpack_require__(/*! ./apiIndex */ \"(api)/../node_modules/googleapis-common/build/src/apiIndex.js\");\nObject.defineProperty(exports, \"getAPI\", ({ enumerable: true, get: function () { return apiIndex_1.getAPI; } }));\nvar apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(api)/../node_modules/googleapis-common/build/src/apirequest.js\");\nObject.defineProperty(exports, \"createAPIRequest\", ({ enumerable: true, get: function () { return apirequest_1.createAPIRequest; } }));\nvar authplus_1 = __webpack_require__(/*! ./authplus */ \"(api)/../node_modules/googleapis-common/build/src/authplus.js\");\nObject.defineProperty(exports, \"AuthPlus\", ({ enumerable: true, get: function () { return authplus_1.AuthPlus; } }));\nvar discovery_1 = __webpack_require__(/*! ./discovery */ \"(api)/../node_modules/googleapis-common/build/src/discovery.js\");\nObject.defineProperty(exports, \"Discovery\", ({ enumerable: true, get: function () { return discovery_1.Discovery; } }));\nvar endpoint_1 = __webpack_require__(/*! ./endpoint */ \"(api)/../node_modules/googleapis-common/build/src/endpoint.js\");\nObject.defineProperty(exports, \"Endpoint\", ({ enumerable: true, get: function () { return endpoint_1.Endpoint; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyx3QkFBd0IsR0FBRyxjQUFjLEdBQUcsbUJBQW1CLEdBQUcsY0FBYyxHQUFHLGlCQUFpQixHQUFHLDBCQUEwQixHQUFHLGlDQUFpQyxHQUFHLDZCQUE2QixHQUFHLGtCQUFrQixHQUFHLDBCQUEwQixHQUFHLHlCQUF5QixHQUFHLGVBQWUsR0FBRyxXQUFXLEdBQUcsb0JBQW9CO0FBQ3BZLDRCQUE0QixtQkFBTyxDQUFDLHlGQUFxQjtBQUN6RCxnREFBK0MsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDckksdUNBQXNDLEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQ25ILDJDQUEwQyxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUMzSCxxREFBb0QsRUFBRSxxQ0FBcUMsbURBQW1ELEVBQUM7QUFDL0ksc0RBQXFELEVBQUUscUNBQXFDLG9EQUFvRCxFQUFDO0FBQ2pKLDhDQUE2QyxFQUFFLHFDQUFxQyw0Q0FBNEMsRUFBQztBQUNqSSx5REFBd0QsRUFBRSxxQ0FBcUMsdURBQXVELEVBQUM7QUFDdkosNkRBQTRELEVBQUUscUNBQXFDLDJEQUEyRCxFQUFDO0FBQy9KLHNEQUFxRCxFQUFFLHFDQUFxQyxvREFBb0QsRUFBQztBQUNqSiw2Q0FBNEMsRUFBRSxxQ0FBcUMsMkNBQTJDLEVBQUM7QUFDL0gsZUFBZSxtQkFBTyxDQUFDLCtEQUFRO0FBQy9CLDBDQUF5QyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM1RywrQ0FBOEMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDdEgsaUJBQWlCLG1CQUFPLENBQUMsaUZBQVk7QUFDckMsMENBQXlDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQzlHLG1CQUFtQixtQkFBTyxDQUFDLHFGQUFjO0FBQ3pDLG9EQUFtRCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUNwSSxpQkFBaUIsbUJBQU8sQ0FBQyxpRkFBWTtBQUNyQyw0Q0FBMkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDbEgsa0JBQWtCLG1CQUFPLENBQUMsbUZBQWE7QUFDdkMsNkNBQTRDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3JILGlCQUFpQixtQkFBTyxDQUFDLGlGQUFZO0FBQ3JDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbmUtdXNlci10by1zaGVldHMvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9pbmRleC5qcz9hYWZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVuZHBvaW50ID0gZXhwb3J0cy5EaXNjb3ZlcnkgPSBleHBvcnRzLkF1dGhQbHVzID0gZXhwb3J0cy5jcmVhdGVBUElSZXF1ZXN0ID0gZXhwb3J0cy5nZXRBUEkgPSBleHBvcnRzLkdheGlvc0Vycm9yID0gZXhwb3J0cy5HYXhpb3MgPSBleHBvcnRzLkF3c0NsaWVudCA9IGV4cG9ydHMuSWRlbnRpdHlQb29sQ2xpZW50ID0gZXhwb3J0cy5CYXNlRXh0ZXJuYWxBY2NvdW50Q2xpZW50ID0gZXhwb3J0cy5FeHRlcm5hbEFjY291bnRDbGllbnQgPSBleHBvcnRzLkdvb2dsZUF1dGggPSBleHBvcnRzLkRlZmF1bHRUcmFuc3BvcnRlciA9IGV4cG9ydHMuVXNlclJlZnJlc2hDbGllbnQgPSBleHBvcnRzLkNvbXB1dGUgPSBleHBvcnRzLkpXVCA9IGV4cG9ydHMuT0F1dGgyQ2xpZW50ID0gdm9pZCAwO1xudmFyIGdvb2dsZV9hdXRoX2xpYnJhcnlfMSA9IHJlcXVpcmUoXCJnb29nbGUtYXV0aC1saWJyYXJ5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT0F1dGgyQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnb29nbGVfYXV0aF9saWJyYXJ5XzEuT0F1dGgyQ2xpZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSldUXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnb29nbGVfYXV0aF9saWJyYXJ5XzEuSldUOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29tcHV0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkNvbXB1dGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVc2VyUmVmcmVzaENsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLlVzZXJSZWZyZXNoQ2xpZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVmYXVsdFRyYW5zcG9ydGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnb29nbGVfYXV0aF9saWJyYXJ5XzEuRGVmYXVsdFRyYW5zcG9ydGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR29vZ2xlQXV0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGg7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFeHRlcm5hbEFjY291bnRDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5FeHRlcm5hbEFjY291bnRDbGllbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCYXNlRXh0ZXJuYWxBY2NvdW50Q2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnb29nbGVfYXV0aF9saWJyYXJ5XzEuQmFzZUV4dGVybmFsQWNjb3VudENsaWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklkZW50aXR5UG9vbENsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLklkZW50aXR5UG9vbENsaWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkF3c0NsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkF3c0NsaWVudDsgfSB9KTtcbnZhciBnYXhpb3NfMSA9IHJlcXVpcmUoXCJnYXhpb3NcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHYXhpb3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdheGlvc18xLkdheGlvczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdheGlvc0Vycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnYXhpb3NfMS5HYXhpb3NFcnJvcjsgfSB9KTtcbnZhciBhcGlJbmRleF8xID0gcmVxdWlyZShcIi4vYXBpSW5kZXhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRBUElcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFwaUluZGV4XzEuZ2V0QVBJOyB9IH0pO1xudmFyIGFwaXJlcXVlc3RfMSA9IHJlcXVpcmUoXCIuL2FwaXJlcXVlc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBUElSZXF1ZXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhcGlyZXF1ZXN0XzEuY3JlYXRlQVBJUmVxdWVzdDsgfSB9KTtcbnZhciBhdXRocGx1c18xID0gcmVxdWlyZShcIi4vYXV0aHBsdXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBdXRoUGx1c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXV0aHBsdXNfMS5BdXRoUGx1czsgfSB9KTtcbnZhciBkaXNjb3ZlcnlfMSA9IHJlcXVpcmUoXCIuL2Rpc2NvdmVyeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpc2NvdmVyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzY292ZXJ5XzEuRGlzY292ZXJ5OyB9IH0pO1xudmFyIGVuZHBvaW50XzEgPSByZXF1aXJlKFwiLi9lbmRwb2ludFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVuZHBvaW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmRwb2ludF8xLkVuZHBvaW50OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/index.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/build/src/isbrowser.js":
/*!****************************************************************!*\
  !*** ../node_modules/googleapis-common/build/src/isbrowser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isBrowser = void 0;\nfunction isBrowser() {\n    return typeof window !== 'undefined';\n}\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=isbrowser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9pc2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbmUtdXNlci10by1zaGVldHMvLi4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9pc2Jyb3dzZXIuanM/OTQ2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jyb3dzZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc2Jyb3dzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/../node_modules/googleapis-common/build/src/isbrowser.js\n");

/***/ }),

/***/ "(api)/../node_modules/googleapis-common/package.json":
/*!******************************************************!*\
  !*** ../node_modules/googleapis-common/package.json ***!
  \******************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"googleapis-common","version":"6.0.4","description":"A common tooling library used by the googleapis npm module. You probably don\'t want to use this directly.","repository":"googleapis/nodejs-googleapis-common","main":"build/src/index.js","types":"build/src/index.d.ts","files":["build/src","!build/src/**/*.map"],"scripts":{"prebenchmark":"npm run compile","benchmark":"node build/benchmark/bench.js","compile":"tsc -p .","test":"c8 mocha build/test","system-test":"c8 mocha build/system-test --timeout 600000","presystem-test":"npm run compile","fix":"gts fix","prepare":"npm run compile","pretest":"npm run compile","lint":"gts check","samples-test":"mocha build/samples-test","docs":"compodoc src/","docs-test":"linkinator docs","webpack":"webpack","browser-test":"karma start","predocs-test":"npm run docs","prelint":"cd samples; npm link ../; npm install","clean":"gts clean","precompile":"gts clean"},"keywords":[],"author":"Google LLC","license":"Apache-2.0","dependencies":{"extend":"^3.0.2","gaxios":"^5.0.1","google-auth-library":"^8.0.2","qs":"^6.7.0","url-template":"^2.0.8","uuid":"^9.0.0"},"devDependencies":{"@compodoc/compodoc":"^1.1.9","@types/execa":"^0.9.0","@types/extend":"^3.0.1","@types/mocha":"^9.0.0","@types/mv":"^2.1.0","@types/ncp":"^2.0.1","@types/nock":"^10.0.3","@types/proxyquire":"^1.3.28","@types/qs":"^6.5.3","@types/sinon":"^10.0.0","@types/tmp":"0.2.3","@types/url-template":"^2.0.28","@types/uuid":"^8.0.0","c8":"^7.0.0","codecov":"^3.5.0","execa":"^5.0.0","gts":"^3.1.0","http2spy":"^2.0.0","is-docker":"^2.0.0","karma":"^6.0.0","karma-chrome-launcher":"^3.0.0","karma-coverage":"^2.0.0","karma-firefox-launcher":"^2.0.0","karma-mocha":"^2.0.0","karma-remap-coverage":"^0.1.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^5.0.0","linkinator":"^3.1.0","mocha":"^9.2.2","mv":"^2.1.1","ncp":"^2.0.0","nock":"^13.0.0","null-loader":"^4.0.0","proxyquire":"^2.1.3","puppeteer":"^18.2.1","sinon":"^14.0.0","tmp":"^0.2.0","ts-loader":"^8.0.0","typescript":"^4.6.4","webpack":"^5.30.0","webpack-cli":"^4.0.0"},"engines":{"node":">=12.0.0"}}');

/***/ })

};
;